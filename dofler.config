[Settings]

### DOFLER SERVER-SIDE OPTIONS ###

# This is the database connection string that the dofler server will use
# to connect to the database.  This has to be a valid SQLAlchemy
# connection string or startup will fail.
#
# Connecting to a SQLite DB
# db_string = sqlite:////var/cache/dofler/dofler.db
#
# Connecting to a MySQL DB
# db_string = mysql://USER:PASSWORD@HOSTNAME:PORT
db_string = sqlite:////var/cache/dofler/dofler.db

# Do we want to enable debugging on the HTTP Service?
debug = no

# What port do we want to run the HTTP Service on?
port = 8089

# What is the IP address that the HTTP service is goind to bind to?
# Normally we will be proxying this service through something like
# apache or nginx to provide support for HTTPS, so this is generally
# left to 127.0.0.1, however it can be set to any assigned IP or even
# 0.0.0.0 to talk out all available interfaces.
address = 0.0.0.0

# The secret key that we will be using for signing the cookies used
# for authentication.  This should be something complex, and not the
# default below.
key = s3kr3t

# Here we tell the HTTP server what backend we want it to use. Its
# generally recommended to switch it from the default to something
# like paste or twisted as they are multi-threaded and asynchronous
# and can handle multiple calls at once.
server = wsgiref


### DOFLER CLIENT-SIDE OPTIONS ###

# We need to set this to something other than the default if this is
# a remote sensor.
dofler_address = http://localhost:8089

# Next we need to configure this sensor's name and secret key.  These
# values are used to authenticate the sensor to the API.  Multiple
# sensors can use the same authentication, however it is generally
# recommended to configure a seperate authentication for each sensor.
sensor_name = localsensor
sensor_secret = s3kr3t


### Parser Configurations ###
# Parser configurations each have 4 options that may need to be adjusted
# depending on performance and need.  The run option lets the client know
# if it should even start up the parser at all.  interface is the interface
# that we want to listen on.  The timer option tells the parser how long to
# keep the process running before terminating and respawning a fresh one.
# Lastly promisc identifies if we want the interface to go into promiscuous
# mode through this application.

[Ettercap]
run = yes
interface = eth1
timer = 3600
promisc = yes

[TShark-http]
run = yes
interface = eth1
timer = 3600
promisc = yes

[TCPXtract]
run = no
interface = eth1
timer = 3600
promisc = no

[Driftnet]
run = yes
interface = eth1
timer = 3600
promisc = yes


### Sensor Configurations ###
# Here is where we can configure individual authentication keys for each
# sensor by name.  The HTTP Server uses this to distinguis the individual
# sensors. 
[Sensors]
localsensor = s3kr3t